Traceback (most recent call last):
  File "/opt/miniconda3/envs/tf2/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/miniconda3/envs/tf2/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/miniconda3/envs/tf2/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/miniconda3/envs/tf2/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/miniconda3/envs/tf2/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/miniconda3/envs/tf2/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/miniconda3/envs/tf2/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/miniconda3/envs/tf2/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from textwrap import wrap

cut = 7
l_matrix = get_linkage_matrix(model_tfidf)
df['cluster'] = fcluster(l_matrix, cut, criterion='maxclust')
dendrogram(l_matrix, orientation='top', truncate_mode="lastp", p=cut, show_leaf_counts=True)

# if a word is a duplicate then remove from all_words
def find_duplicates(all_words, occurences=1):
    duplicates = []
    non_duplicates = []

    for i in all_words:
        if i in duplicates: continue
        else:
            if all_words.count(i) > occurences: duplicates.append(i)
            else: non_duplicates.append(i)
    return duplicates

all_words = []

for i in df['cluster'].unique():
    cluster_docs = df[df['cluster'] == i]
    # print(i, get_most_common_word(cluster_docs['clean_text']))
    [all_words.append(i[0]) for idx,i in enumerate(get_most_common_word(cluster_docs['clean_text']))]
    
all_words_to_remove = find_duplicates(all_words, occurences=2)
all_words_to_remove.extend(['j','th','nd','exhibitionexhibited'])

for i in df['cluster'].unique():
    cluster_docs = df[df['cluster'] == i]
    # print(i, get_most_common_word(cluster_docs['clean_text']))
    annot = "\n".join(i[0] for idx,i in enumerate(get_most_common_word(cluster_docs['clean_text'],
                                                                       more_words=all_words_to_remove)) if (idx < 5))
    
    plt.annotate(annot, xy=(i/df['cluster'].nunique()-0.1, 0.05), 
                 xytext=(i/df['cluster'].nunique()-0.1, 0.05), 
                 xycoords='axes fraction', fontsize=9)
    
    annot2 = cluster_docs.sort_values('cat_count', ascending=False)['category'].values[0:3]
    annot2 = '\n\n'.join(['\n'.join(wrap(line, 18)) for line in [i.split(',')[0] for i in annot2]])
    # annot2 = '\n'.join(wrap(annot2, 18)) # breaks strings into new lines

    plt.annotate(annot2, xy=(i/df['cluster'].nunique()-0.115, -0.24), 
                xytext=(i/df['cluster'].nunique()-0.115, -0.24), 
                xycoords='axes fraction', fontsize=9)

plt.title("Hierarchical Clustering Dendrogram - TF-IDF")

# make figure bigger
fig = plt.gcf()
fig.set_size_inches(14, 10)

plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn [26], line 4[0m
[1;32m      1[0m [38;5;28;01mfrom[39;00m [38;5;21;01mtextwrap[39;00m [38;5;28;01mimport[39;00m wrap
[1;32m      3[0m cut [38;5;241m=[39m [38;5;241m7[39m
[0;32m----> 4[0m l_matrix [38;5;241m=[39m get_linkage_matrix([43mmodel_tfidf[49m)
[1;32m      5[0m df[[38;5;124m'[39m[38;5;124mcluster[39m[38;5;124m'[39m] [38;5;241m=[39m fcluster(l_matrix, cut, criterion[38;5;241m=[39m[38;5;124m'[39m[38;5;124mmaxclust[39m[38;5;124m'[39m)
[1;32m      6[0m dendrogram(l_matrix, orientation[38;5;241m=[39m[38;5;124m'[39m[38;5;124mtop[39m[38;5;124m'[39m, truncate_mode[38;5;241m=[39m[38;5;124m"[39m[38;5;124mlastp[39m[38;5;124m"[39m, p[38;5;241m=[39mcut, show_leaf_counts[38;5;241m=[39m[38;5;28;01mTrue[39;00m)

[0;31mNameError[0m: name 'model_tfidf' is not defined
NameError: name 'model_tfidf' is not defined

